// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// // model User {
// //   id             Int      @id @default(autoincrement())
// //   githubId       String   @unique
// //   username       String
// //   email          String   @unique
// //   password       String?
// //   accessToken    String?
// //   refreshToken   String?
// //   createdAt      DateTime @default(now())
// //   createdIssues  Issue[]  @relation("CreatedIssues") // ðŸ‘ˆ this matches with createdBy
// //   assignedIssues Issue[]  @relation("AssignedIssues") // ðŸ‘ˆ this matches with assignedTo
// //   teamId         Int?
// //   team           Team?    @relation("UserTeam", fields: [teamId], references: [id])
// // }

// // model Issue {
// //   id           Int    @id @default(autoincrement())
// //   title        String
// //   description  String
// //   status       String @default("open") // open, in-progress, closed
// //   priority     String @default("medium") // low, medium, high
// //   createdBy    User   @relation("CreatedIssues", fields: [createdById], references: [id])
// //   createdById  Int
// //   assignedTo   User?  @relation("AssignedIssues", fields: [assignedToId], references: [id])
// //   assignedToId Int?

// //   comments  String?
// //   createdAt DateTime @default(now())
// //   updatedAt DateTime @updatedAt
// // }

// // model Team {
// //   id    Int    @id @default(autoincrement())
// //   name  String @unique
// //   users User[] @relation("UserTeam")
// // }

// model Team {
//   id        Int      @id @default(autoincrement())
//   name      String   @unique
//   email     String   @unique
//   users     User[]
//   issues    Issue[]
//   createdAt DateTime @default(now())
// }

// model User {
//   id             Int      @id @default(autoincrement())
//   githubId       String   @unique
//   username       String
//   email          String   @unique
//   password       String?
//   accessToken    String?
//   refreshToken   String?
//   createdAt      DateTime @default(now())
//   teamId         Int?
//   team           Team?    @relation(fields: [teamId], references: [id])
//   createdIssues  Issue[]  @relation("CreatedIssues")
//   assignedIssues Issue[]  @relation("AssignedIssues")
// }

// model Issue {
//   id           Int      @id @default(autoincrement())
//   title        String
//   description  String
//   status       String   @default("open")
//   priority     String   @default("medium")
//   createdBy    User     @relation("CreatedIssues", fields: [createdById], references: [id])
//   createdById  Int
//   assignedTo   User?    @relation("AssignedIssues", fields: [assignedToId], references: [id])
//   assignedToId Int?
//   teamId       Int?
//   team         Team?    @relation(fields: [teamId], references: [id])
//   comments     String?
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt
// }

// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  email     String   @unique
  users     User[]
  issues    Issue[]
  createdAt DateTime @default(now())
}

model User {
  id             Int       @id @default(autoincrement())
  githubId       String    @unique
  username       String
  email          String    @unique
  password       String?
  accessToken    String?
  refreshToken   String?
  createdAt      DateTime  @default(now())
  teamId         Int?
  team           Team?     @relation(fields: [teamId], references: [id])
  createdIssues  Issue[]   @relation("CreatedIssues")
  assignedIssues Issue[]   @relation("AssignedIssues")
  comments       Comment[] // User can create many comments
}

model Issue {
  id           Int       @id @default(autoincrement())
  title        String
  description  String
  status       String    @default("open")
  priority     String    @default("medium")
  createdBy    User      @relation("CreatedIssues", fields: [createdById], references: [id])
  createdById  Int
  assignedTo   User?     @relation("AssignedIssues", fields: [assignedToId], references: [id])
  assignedToId Int?
  teamId       Int?
  team         Team?     @relation(fields: [teamId], references: [id])
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  comments     Comment[] // Issue can have many comments
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  author   User  @relation(fields: [authorId], references: [id])
  authorId Int
  issue    Issue @relation(fields: [issueId], references: [id])
  issueId  Int

  // Self-relation for threaded comments
  parentId Int?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id])
  replies  Comment[] @relation("CommentReplies")
}
